{"id":"node_modules/rxjs/dist/esm5/internal/operators/count.js","dependencies":[{"name":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/operators/count.js.map","includedInParent":true,"mtime":1696211014021},{"name":"/project/new-sanity-test/node_modules/rxjs/src/internal/operators/count.ts","includedInParent":true,"mtime":1696211014021},{"name":"/project/new-sanity-test/package.json","includedInParent":true,"mtime":1696219234123},{"name":"/project/new-sanity-test/node_modules/rxjs/package.json","includedInParent":true,"mtime":1696211014021},{"name":"./reduce","loc":{"line":1,"column":23,"index":23},"parent":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/operators/count.js","resolved":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/operators/reduce.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.count = count;\nvar _reduce = require(\"./reduce\");\nfunction count(predicate) {\n  return (0, _reduce.reduce)(function (total, value, i) {\n    return !predicate || predicate(value, i) ? total + 1 : total;\n  }, 0);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":11}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":14}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":21}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":6},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":16},"generated":{"line":8,"column":9}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":21},"generated":{"line":8,"column":14}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":25},"generated":{"line":8,"column":15}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":73},"generated":{"line":8,"column":24}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":73},"generated":{"line":8,"column":26}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":9,"column":2}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":9},"generated":{"line":9,"column":9}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":9},"generated":{"line":9,"column":13}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":15},"generated":{"line":9,"column":27}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":16},"generated":{"line":9,"column":29}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":17},"generated":{"line":9,"column":39}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":22},"generated":{"line":9,"column":44}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":24},"generated":{"line":9,"column":46}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":29},"generated":{"line":9,"column":51}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":31},"generated":{"line":9,"column":53}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":32},"generated":{"line":9,"column":54}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":32},"generated":{"line":9,"column":56}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":37},"generated":{"line":10,"column":4}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":38},"generated":{"line":10,"column":11}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":39},"generated":{"line":10,"column":12}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":48},"generated":{"line":10,"column":21}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":52},"generated":{"line":10,"column":25}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":61},"generated":{"line":10,"column":34}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":62},"generated":{"line":10,"column":35}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":67},"generated":{"line":10,"column":40}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":69},"generated":{"line":10,"column":42}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":70},"generated":{"line":10,"column":43}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":71},"generated":{"line":10,"column":44}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":74},"generated":{"line":10,"column":47}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":79},"generated":{"line":10,"column":52}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":82},"generated":{"line":10,"column":55}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":83},"generated":{"line":10,"column":56}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":86},"generated":{"line":10,"column":59}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":91},"generated":{"line":10,"column":64}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":37},"generated":{"line":11,"column":2}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":92},"generated":{"line":11,"column":3}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":94},"generated":{"line":11,"column":5}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":95},"generated":{"line":11,"column":6}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":96},"generated":{"line":11,"column":7}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":61,"column":0},"generated":{"line":12,"column":0}}],"sources":{"../../../../src/internal/operators/count.ts":"import { OperatorFunction } from '../types';\nimport { reduce } from './reduce';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * ![](count.png)\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * ## Examples\n *\n * Counts how many seconds have passed before the first click happened\n *\n * ```ts\n * import { interval, fromEvent, takeUntil, count } from 'rxjs';\n *\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\n * const result = secondsBeforeClick.pipe(count());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Counts how many odd numbers are there between 1 and 7\n *\n * ```ts\n * import { range, count } from 'rxjs';\n *\n * const numbers = range(1, 7);\n * const result = numbers.pipe(count(i => i % 2 === 1));\n * result.subscribe(x => console.log(x));\n * // Results in:\n * // 4\n * ```\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param predicate A function that is used to analyze the value and the index and\n * determine whether or not to increment the count. Return `true` to increment the count,\n * and return `false` to keep the count the same.\n * If the predicate is not provided, every value will be counted.\n * @return A function that returns an Observable that emits one number that\n * represents the count of emissions.\n */\nexport function count<T>(predicate?: (value: T, index: number) => boolean): OperatorFunction<T, number> {\n  return reduce((total, value, i) => (!predicate || predicate(value, i) ? total + 1 : total), 0);\n}\n"},"lineCount":null}},"error":null,"hash":"5e9814a2cec1a14abd7386096072731a","cacheData":{"env":{}}}