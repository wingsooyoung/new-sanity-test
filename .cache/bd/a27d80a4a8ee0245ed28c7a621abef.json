{"id":"node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js","dependencies":[{"name":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js.map","includedInParent":true,"mtime":1696211014021},{"name":"/project/new-sanity-test/node_modules/rxjs/src/internal/operators/sampleTime.ts","includedInParent":true,"mtime":1696211014021},{"name":"/project/new-sanity-test/package.json","includedInParent":true,"mtime":1696219234123},{"name":"/project/new-sanity-test/node_modules/rxjs/package.json","includedInParent":true,"mtime":1696211014021},{"name":"../scheduler/async","loc":{"line":1,"column":31,"index":31},"parent":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js","resolved":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/scheduler/async.js"},{"name":"./sample","loc":{"line":2,"column":23,"index":76},"parent":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js","resolved":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/operators/sample.js"},{"name":"../observable/interval","loc":{"line":3,"column":25,"index":113},"parent":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js","resolved":"/project/new-sanity-test/node_modules/rxjs/dist/esm5/internal/observable/interval.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sampleTime = sampleTime;\nvar _async = require(\"../scheduler/async\");\nvar _sample = require(\"./sample\");\nvar _interval = require(\"../observable/interval\");\nfunction sampleTime(period, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = _async.asyncScheduler;\n  }\n  return (0, _sample.sample)((0, _interval.interval)(period, scheduler));\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":10}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":13}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":20}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":4}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":11}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":14}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":21}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":4}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":13}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":16}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":23}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":6},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":16},"generated":{"line":10,"column":9}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":26},"generated":{"line":10,"column":19}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":30},"generated":{"line":10,"column":20}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":44},"generated":{"line":10,"column":26}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":10,"column":28}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":87},"generated":{"line":10,"column":37}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":87},"generated":{"line":10,"column":39}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":11,"column":2}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":11,"column":6}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":11,"column":15}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":11,"column":20}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":11,"column":25}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":11,"column":26}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":11,"column":28}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":12,"column":4}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":12,"column":13}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":46},"generated":{"line":12,"column":16}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":87},"generated":{"line":12,"column":37}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":49,"column":87},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":2},"generated":{"line":14,"column":2}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":14,"column":9}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":14,"column":13}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":15},"generated":{"line":14,"column":27}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":16},"generated":{"line":14,"column":29}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":16},"generated":{"line":14,"column":33}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":24},"generated":{"line":14,"column":51}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":25},"generated":{"line":14,"column":53}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":31},"generated":{"line":14,"column":59}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":33},"generated":{"line":14,"column":61}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":42},"generated":{"line":14,"column":70}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":43},"generated":{"line":14,"column":71}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":50,"column":44},"generated":{"line":14,"column":72}},{"source":"../../../../src/internal/operators/sampleTime.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":15,"column":0}}],"sources":{"../../../../src/internal/operators/sampleTime.ts":"import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { sample } from './sample';\nimport { interval } from '../observable/interval';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * ![](sampleTime.png)\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * ## Example\n *\n * Every second, emit the most recent click at most once\n *\n * ```ts\n * import { fromEvent, sampleTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(sampleTime(1000));\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the sampling.\n * @return A function that returns an Observable that emits the results of\n * sampling the values emitted by the source Observable at the specified time\n * interval.\n */\nexport function sampleTime<T>(period: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return sample(interval(period, scheduler));\n}\n"},"lineCount":null}},"error":null,"hash":"d1e7adab9a8d2311d79f82a5982abd76","cacheData":{"env":{}}}